# Este workflow é responsável por integração contínua (CI): roda testes, lint e builda a imagem Docker para garantir a qualidade do código.

name: CI  # Nome do workflow que aparecerá no GitHub Actions

on:
  push:
    branches: [develop]  
  pull_request:
    branches: [develop] 

jobs:
  test:
    runs-on: ubuntu-latest 

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 2390
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: localhost  
      DB_PORT: 5432  
      DB_USER: postgres  
      DB_NAME: postgres  
      DB_PASSWORD: 2390  
      PYTHONPATH: ${{ github.workspace }}  

    steps:
      - uses: actions/checkout@v4  

      - name: Set up Python
        uses: actions/setup-python@v5  
        with:
          python-version: '3.11'  

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Atualiza o pip para a última versão
          pip install -r requirements.txt      # Instala todas as dependências do projeto

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create database tables
        run: |
          python -c "
          from app.schemas.models import Base
          from app.utils.config import engine
          Base.metadata.create_all(bind=engine)
          print('Database tables created successfully')
          "

      - name: Run tests with pytest
        run: |
          pytest app/test/ -v --tb=short --maxfail=5 --disable-warnings
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Test FastAPI application startup
        run: |
          python -c "
          from app.main import app
          print('FastAPI application loaded successfully')
          "

      - name: Build Docker image
        run: docker build -t fastpass-test .  # Builda a imagem Docker localmente para garantir que o Dockerfile está correto

      - name: Test Docker image
        run: |
          docker run --rm -d --name fastpass-test-container -p 8000:5000 fastpass-test
          sleep 10
          docker logs fastpass-test-container
          docker stop fastpass-test-container